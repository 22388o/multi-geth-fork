// Copyright 2019 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package rpc

// File contains auto-generated constant(s) containing schema data for OpenRPC.
// Their content is a JSON string.
// Use mkopenrpc.go to create/update them.

// nolint: misspell

const openRPCSchema = `"{\n  \"openrpc\": \"1.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Multi Geth RPC\",\n    \"description\": \"This API lets you interact with the blockchain via JSON-RPC\",\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8545\"\n    }\n  ],\n  \"methods\": [\n    {\n      \"name\": \"eth_getBlockByHash\",\n      \"summary\": \"Gets a block for a given hash\",\n      \"params\": [\n        {\n          \"name\": \"blockHash\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        },\n        {\n          \"name\": \"includeTransactions\",\n          \"description\": \"If ` + "`" + `true` + "`" + ` it returns the full transaction objects, if ` + "`" + `false` + "`" + ` only the hashes of the transactions.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"boolean\"\n          }\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/contentDescriptors/Block\"\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getBlockByNumber\",\n      \"summary\": \"Gets a block for a given number\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        },\n        {\n          \"name\": \"includeTransactions\",\n          \"description\": \"If ` + "`" + `true` + "`" + ` it returns the full transaction objects, if ` + "`" + `false` + "`" + ` only the hashes of the transactions.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"boolean\"\n          }\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/contentDescriptors/Block\"\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_blockNumber\",\n      \"summary\": \"Returns the number of most recent block.\",\n      \"params\": [],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n      }\n    },\n    {\n      \"name\": \"eth_getStorageAt\",\n      \"summary\": \"Gets a storage value from a contract address, a position, and an optional blockNumber\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Position\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"dataWord\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/DataWord\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getTransactionCount\",\n      \"summary\": \"Returns the number of transactions sent from an address\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"name\": \"nonce\",\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/Nonce\"\n            }\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getTransactionByHash\",\n      \"summary\": \"Returns the information about a transaction requested by transaction hash.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/TransactionHash\"\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/contentDescriptors/Transaction\"\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getTransactionByBlockHashAndIndex\",\n      \"summary\": \"Returns the information about a transaction requested by the block hash and index of which it was mined.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockHash\"\n        },\n        {\n          \"name\": \"index\",\n          \"description\": \"The ordering in which a transaction is mined within its block.\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/contentDescriptors/Transaction\"\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      },\n      \"examples\": [\n        {\n          \"name\": \"nullExample\",\n          \"params\": [\n            {\n              \"name\": \"blockHashExample\",\n              \"value\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n            },\n            {\n              \"name\": \"indexExample\",\n              \"value\": \"0x0\"\n            }\n          ],\n          \"result\": {\n            \"name\": \"nullResultExample\",\n            \"value\": null\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"eth_getTransactionByBlockNumberAndIndex\",\n      \"summary\": \"Returns the information about a transaction requested by the block hash and index of which it was mined.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        },\n        {\n          \"name\": \"index\",\n          \"description\": \"The ordering in which a transaction is mined within its block.\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/contentDescriptors/Transaction\"\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getTransactionReceipt\",\n      \"summary\": \"Returns the receipt information of a transaction by its hash.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/TransactionHash\"\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"name\": \"receipt\",\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/Receipt\"\n            }\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getUncleByBlockHashAndIndex\",\n      \"summary\": \"Returns information about a uncle of a block by hash and uncle index position.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockHash\"\n        },\n        {\n          \"name\": \"index\",\n          \"description\": \"The ordering in which a uncle is included within its block.\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"uncle\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Uncle\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/Null\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getUncleByBlockNumberAndIndex\",\n      \"summary\": \"Returns information about a uncle of a block by hash and uncle index position.\",\n      \"params\": [\n        {\n          \"name\": \"uncleBlockNumber\",\n          \"description\": \"The block in which the uncle was included\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          }\n        },\n        {\n          \"name\": \"index\",\n          \"description\": \"The ordering in which a uncle is included within its block.\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"name\": \"uncle\",\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/Uncle\"\n            }\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      },\n      \"examples\": [\n        {\n          \"name\": \"nullResultExample\",\n          \"params\": [\n            {\n              \"name\": \"uncleBlockNumberExample\",\n              \"value\": \"0x0\"\n            },\n            {\n              \"name\": \"uncleBlockNumberIndexExample\",\n              \"value\": \"0x0\"\n            }\n          ],\n          \"result\":{\n            \"name\": \"nullResultExample\",\n            \"value\": null\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"eth_newFilter\",\n      \"summary\": \"Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call eth_getFilterChanges.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Filter\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"filterId\",\n        \"schema\": {\n          \"description\": \"The filter ID for use in ` + "`" + `eth_getFilterChanges` + "`" + `\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_newBlockFilter\",\n      \"summary\": \"Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.\",\n      \"params\": [],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/FilterId\"\n      }\n    },\n    {\n      \"name\": \"eth_newPendingTransactionFilter\",\n      \"summary\": \"Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call eth_getFilterChanges.\",\n      \"params\": [],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/FilterId\"\n      }\n    },\n    {\n      \"name\": \"eth_uninstallFilter\",\n      \"summary\": \"Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren't requested with eth_getFilterChanges for a period of time.\",\n      \"params\": [\n        {\n          \"name\": \"filterId\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/FilterId\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"filterUninstalledSuccess\",\n        \"schema\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether of not the filter was successfully uninstalled\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getFilterChanges\",\n      \"summary\": \"Polling method for a filter, which returns an array of logs which occurred since last poll.\",\n      \"params\": [\n        {\n          \"name\": \"filterId\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/FilterId\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Log\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getFilterLogs\",\n      \"summary\": \"Returns an array of all logs matching filter with given id.\",\n      \"params\": [\n        {\n          \"name\": \"filterId\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/FilterId\"\n          }\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/Logs\"\n      }\n    },\n    {\n      \"name\": \"eth_getLogs\",\n      \"summary\": \"Returns an array of all logs matching a given filter object.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Filter\"\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/Logs\"\n      }\n    },\n    {\n      \"name\": \"eth_getWork\",\n      \"summary\": \"Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"work\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"$ref\": \"#/components/schemas/PowHash\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/SeedHash\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/Difficulty\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_submitWork\",\n      \"summary\": \"Used for submitting a proof-of-work solution.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Nonce\"\n        },\n        {\n          \"name\": \"powHash\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/PowHash\"\n          }\n        },\n        {\n          \"name\": \"mixHash\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/MixHash\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"solutionValid\",\n        \"description\": \"returns true if the provided solution is valid, otherwise false.\",\n        \"schema\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether or not the provided solution is valid\"\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"submitWorkExample\",\n          \"params\": [\n            {\n              \"name\": \"nonceExample\",\n              \"description\": \"example of a number only used once\",\n              \"value\": \"0x0000000000000001\"\n            },\n            {\n              \"name\": \"powHashExample\",\n              \"description\": \"proof of work to submit\",\n              \"value\": \"0x6bf2cAE0dE3ec3ecA5E194a6C6e02cf42aADfe1C2c4Fff12E5D36C3Cf7297F22\"\n            },\n            {\n              \"name\": \"mixHashExample\",\n              \"description\": \"the mix digest example\",\n              \"value\": \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n            }\n          ],\n          \"result\": {\n            \"name\": \"solutionInvalidExample\",\n            \"description\": \"this example should return ` + "`" + `false` + "`" + ` as it is not a valid pow to submit\",\n            \"value\": false\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"eth_submitHashrate\",\n      \"summary\": \"Returns an array of all logs matching a given filter object.\",\n      \"params\": [\n        {\n          \"name\": \"hashRate\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/DataWord\"\n          }\n        },\n        {\n          \"name\": \"id\",\n          \"description\": \"String identifiying the client\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/DataWord\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"submitHashRateSuccess\",\n        \"schema\": {\n          \"type\": \"boolean\",\n          \"description\": \"whether of not submitting went through succesfully\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getProof\",\n      \"summary\": \"Returns the account- and storage-values of the specified account including the Merkle-proof.\",\n      \"params\": [\n        {\n          \"name\": \"address\",\n          \"description\": \"The address of the account or contract\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        },\n        {\n          \"name\": \"storageKeys\",\n          \"schema\": {\n            \"description\": \"The storage keys of all the storage slots being requested\",\n            \"items\": {\n              \"description\": \"A storage key is indexed from the solidity compiler by the order it is declaired. For mappings it uses the keccak of the mapping key with its position (and recursively for X-dimentional mappings)\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            }\n          }\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"account\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"type\": \"object\",\n              \"description\": \"The merkle proofs of the specified account connecting them to the blockhash of the block specified\",\n              \"properties\": {\n                \"address\": {\n                  \"description\": \"The address of the account or contract of the request\",\n                  \"$ref\": \"#/components/schemas/Address\"\n                },\n                \"accountProof\": {\n                  \"$ref\": \"#/components/schemas/AccountProof\"\n                },\n                \"balance\": {\n                  \"description\": \"The Ether balance of the account or contract of the request\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                },\n                \"codeHash\": {\n                  \"description\": \"The code hash of the contract of the request (keccak(NULL) if external account)\",\n                  \"$ref\": \"#/components/schemas/Keccak\"\n                },\n                \"nonce\": {\n                  \"description\": \"The transaction count of the account or contract of the request\",\n                  \"$ref\": \"#/components/schemas/Nonce\"\n                },\n                \"storageHash\": {\n                  \"description\": \"The storage hash of the contract of the request (keccak(rlp(NULL)) if external account)\",\n                  \"$ref\": \"#/components/schemas/Keccak\"\n                },\n                \"storageProof\": {\n                  \"$ref\": \"#/components/schemas/StorageProof\"\n                }\n              }\n            },\n            {\n              \"$ref\": \"#/components/schemas/Null\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getCode\",\n      \"summary\": \"Returns code at a given contract address\",\n      \"params\": [\n        {\n          \"name\": \"address\",\n          \"description\": \"The address of the contract\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        },\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"A BlockNumber of which the code existed\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"bytes\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getBalance\",\n      \"summary\": \"Returns Ether balance of a given or account or contract\",\n      \"params\": [\n        {\n          \"name\": \"address\",\n          \"description\": \"The address of the acccount or contract\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        },\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"A BlockNumber at which to request the balance\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"getBalanceResult\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/Null\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_sign\",\n      \"summary\": \"The sign method calculates an Ethereum specific signature with: sign(keccak256( '\\\\x19Ethereum Signed Message:\\\\n' + len(message) + message))).\",\n      \"params\": [\n        {\n          \"name\": \"address\",\n          \"description\": \"The address of the account who's signature to use.\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        },\n        {\n          \"name\": \"message\",\n          \"description\": \"The message to sign\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"signatureData\",\n        \"schema\": {\n          \"description\": \"The signature data.\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_accounts\",\n      \"summary\": \"Returns a list of accounts owned by the client\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"addresses\",\n        \"schema\": {\n          \"description\": \"An array of addresses owned by the client\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"eth_gasPrice\",\n      \"summary\": \"Returns the current price per gas in wei\",\n      \"params\": [],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/GasPrice\"\n      }\n    },\n    {\n      \"name\": \"eth_hashrate\",\n      \"summary\": \"Returns the number of hashes per second that the node is mining with.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"hashesPerSecond\",\n        \"schema\": {\n          \"description\": \"Integer of the number of hashes per second\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_mining\",\n      \"summary\": \"Returns true if client is actively mining new blocks.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"mining\",\n        \"schema\": {\n          \"description\": \"Whether of not the client is mining\",\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_coinbase\",\n      \"summary\": \"Returns the client coinbase address.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"address\",\n        \"schema\": {\n          \"description\": \"The address owned by the client that is used as default for things like the mining reward\",\n          \"$ref\": \"#/components/schemas/Address\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_protocolVersion\",\n      \"summary\": \"Returns the current ethereum protocol version.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"protocolVersion\",\n        \"schema\": {\n          \"description\": \"The current ethereum protocol version\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getBlockTransactionCountByHash\",\n      \"summary\": \"Returns the number of transactions in a block from a block matching the given block hash.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockHash\"\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"name\": \"blockTransactionCountByHash\",\n            \"schema\": {\n              \"description\": \"The Number of total transactions in the given block\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            }\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getBlockTransactionCountByNumber\",\n      \"summary\": \"Returns the number of transactions in a block from a block matching the given block number.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"oneOf\": [\n          {\n            \"name\": \"blocktransactionCountByNumber\",\n            \"schema\": {\n              \"description\": \"The Number of total transactions in the given block\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            }\n          },\n          {\n            \"$ref\": \"#/components/contentDescriptors/Null\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"eth_getUncleCountByBlockHash\",\n      \"summary\": \"Returns the number of uncles in a block from a block matching the given block hash.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockHash\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"uncleCountResult\",\n        \"description\": \"The Number of total uncles in the given block\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/Null\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_getUncleCountByBlockNumber\",\n      \"summary\": \"Returns the number of uncles in a block from a block matching the given block number.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"uncleCountResult\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"description\": \"The Number of total uncles in the given block\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/Null\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"eth_sendTransaction\",\n      \"summary\": \"Creates new message call transaction or a contract creation, if the data field contains code.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"transactionHash\",\n        \"schema\": {\n          \"description\": \"The transaction hash, or the zero hash if the transaction is not yet available.\",\n          \"$ref\": \"#/components/schemas/Keccak\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_sendRawTransaction\",\n      \"summary\": \"Creates new message call transaction or a contract creation for signed transactions.\",\n      \"params\": [\n        {\n          \"name\": \"signedTransactionData\",\n          \"description\": \"The signed transaction data\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"transactionHash\",\n        \"schema\": {\n          \"description\": \"The transaction hash, or the zero hash if the transaction is not yet available.\",\n          \"$ref\": \"#/components/schemas/Keccak\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_call\",\n      \"summary\": \"Executes a new message call (locally) immediately without creating a transaction on the block chain.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/BlockNumber\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"returnValue\",\n        \"schema\": {\n          \"description\": \"The return value of the executed contract\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_estimateGas\",\n      \"summary\": \"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"gasUsed\",\n        \"schema\": {\n          \"description\": \"The amount of gas used\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      }\n    },\n    {\n      \"name\": \"eth_syncing\",\n      \"summary\": \"Returns an object with data about the sync status or false.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"syncing\",\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"description\": \"An object with sync status data\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"startingBlock\": {\n                  \"description\": \"Block at which the import started (will only be reset, after the sync reached his head)\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                },\n                \"currentBlock\": {\n                  \"description\": \"The current block, same as eth_blockNumber\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                },\n                \"highestBlock\": {\n                  \"description\": \"The estimated highest block\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                },\n                \"knownStates\": {\n                  \"description\": \"The known states\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                },\n                \"pulledStates\": {\n                  \"description\": \"The pulled states\",\n                  \"$ref\": \"#/components/schemas/Integer\"\n                }\n              }\n            },\n            {\n              \"type\": \"boolean\",\n              \"description\": \"The value ` + "`" + `false` + "`" + ` indicating that syncing is complete\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"name\": \"admin_exportChain\",\n      \"description\": \"Exports a blockchain into the specified file, appending to the file if data already exists in it\",\n      \"params\": [\n        {\n          \"name\": \"fp\",\n          \"description\": \"path to file\",\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"result\",\n        \"description\": \"result of chain exporting\",\n        \"schema\": {}\n      }\n    },\n    {\n      \"name\": \"admin_importChain\",\n      \"description\": \"Import full chain\",\n      \"params\": [\n        {\n          \"name\": \"chain\",\n          \"description\": \"path to file containing chain\",\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"result\",\n        \"description\": \"result of chain import\",\n        \"schema\": {}\n      }\n    },\n    {\n      \"name\": \"debug_chaindbCompact\",\n      \"description\": \"Compact chain DB. Does not work for memory databases\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"null\",\n        \"schema\": {\n          \"type\": \"null\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_chaindbProperty\",\n      \"description\": \"returns leveldb properties of the chain database.\",\n      \"params\": [\n        {\n          \"name\": \"property\",\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"leveldb property\",\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_dumpBlock\",\n      \"description\": \"Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code)\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"pattern\": \"^0x[a-fA-F\\\\d]+$\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"Block state\",\n        \"schema\": {\n          \"description\": \"\",\n          \"$ref\": \"#/components/schemas/Block\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_getBadBlocks\",\n      \"description\": \"returns a list of the last 'bad blocks' that the client has seen on the network and returns them as a JSON list of block-hashes\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"badBlocks\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"debug_getBlockRlp\",\n      \"description\": \"Retrieves and returns the RLP encoded block by number\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"number of target block\",\n          \"schema\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"blockRLP\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/BlockRLP\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_getModifiedAccountsByHash\",\n      \"description\": \"returns all accounts that have changed between the two blocks specified.\\nA change is defined as a difference in nonce, balance, code hash, or storage hash.\\n With one parameter, returns the list of accounts modified in the specified block.\",\n      \"params\": [\n        {\n          \"name\": \"startHash\",\n          \"description\": \"hash of start block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        },\n        {\n          \"name\": \"endHash\",\n          \"description\": \"hash of end block\",\n          \"schema\": {\n            \"oneOf\": [\n              {\n                \"$ref\": \"#/components/schemas/BlockHash\"\n              },\n              {\n                \"$ref\": \"#/components/schemas/Null\"\n              }\n            ]\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"changedAccounts\",\n        \"schema\": {\n          \"description\": \"accounts that have changed\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"debug_getModifiedAccountsByNumber\",\n      \"description\": \"returns all accounts that have changed between the two blocks specified.\\n A change is defined as a difference in nonce, balance, code hash, or storage hash. \\nWith one parameter, returns the list of accounts modified in the specified block.\",\n      \"params\": [\n        {\n          \"name\": \"startHash\",\n          \"description\": \"hash of start block\",\n          \"schema\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n          }\n        },\n        {\n          \"name\": \"endHash\",\n          \"description\": \"hash of end block\",\n          \"schema\": {\n            \"oneOf\": [\n              {\n                \"type\": \"integer\",\n                \"minimum\": 0\n              },\n              {\n                \"$ref\": \"#/components/schemas/Null\"\n              }\n            ]\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"changedAccounts\",\n        \"schema\": {\n          \"description\": \"accounts that have changed\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"debug_preimage\",\n      \"description\": \"preimage retrieves a cached trie node pre-image from memory. \\nIf it cannot be found cached, the method queries the persistent database for the content\",\n      \"params\": [\n        {\n          \"name\": \"nodeHash\",\n          \"description\": \"hash for required tree node\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Keccak\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"preimage\",\n        \"schema\": {\n          \"description\": \"requested pre-image\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_printBlock\",\n      \"description\": \"PrintBlock retrieves a block and returns its pretty printed form\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"number of target block\",\n          \"schema\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"result\",\n        \"description\": \"pretty printed block\",\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_seedHash\",\n      \"description\": \"Fetches and retrieves the seed hash of the block by number\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"number of target block\",\n          \"schema\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"seed hash of the block\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_setHead\",\n      \"description\": \"Sets the current head of the local chain by block number. \\nNote: this is a destructive action and may severely damage your chain. Use with extreme caution.\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"number of target block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"head is set to the new block\",\n        \"schema\": {}\n      }\n    },\n    {\n      \"name\": \"debug_standardTraceBadBlockToFile\",\n      \"description\": \"StandardTraceBadBlockToFile dumps the structured logs created during the execution of EVM against a block pulled from the pool of bad ones to the local file system and returns a list of files to the caller\",\n      \"params\": [\n        {\n          \"name\": \"badBlockHash\",\n          \"description\": \"hash for a bad block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        },\n        {\n          \"name\": \"StdTraceConfig\",\n          \"description\": \"holds extra paramters to standard-json trace functions\",\n          \"schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"logConfig\": {\n                \"$ref\": \"#/components/schemas/LogConfig\"\n              },\n              \"reexec\": {\n                \"type\": \"integer\"\n              },\n              \"txHash\": {\n                \"$ref\": \"#/components/schemas/TransactionHash\"\n              }\n            }\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"result\",\n        \"description\": \"bad block traced to file\",\n        \"schema\": {}\n      }\n    },\n    {\n      \"name\": \"debug_standardTraceBlockToFile\",\n      \"description\": \"standardTraceBlockToFile configures a new tracer which uses standard JSON output,\\n and traces either a full block or an individual transaction.\\n The return value will be one filename per transaction traced.\",\n      \"params\": [\n        {\n          \"name\": \"blockHash\",\n          \"description\": \"hash for a block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"block traced to file\",\n        \"schema\": {}\n      }\n    },\n    {\n      \"name\": \"debug_storageRangeAt\",\n      \"description\": \"StorageRangeAt returns the storage at the given block height and transaction index.\",\n      \"params\": [\n        {\n          \"name\": \"blockHash\",\n          \"description\": \"hash for a block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        },\n        {\n          \"name\": \"txIndex\",\n          \"description\": \"transaction index\",\n          \"schema\": {\n            \"type\": \"integer\"\n          }\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        },\n        {\n          \"name\": \"startKey\",\n          \"description\": \"Start Key\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"pattern\": \"^0x[a-fA-F\\\\d]{40}$\"\n          }\n        },\n        {\n          \"name\": \"limit\",\n          \"summary\": \"number of storage entries\",\n          \"description\": \"Number of storage entries to return.\",\n          \"schema\": {\n            \"type\": \"integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"storage range\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/StorageRange\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceBadBlock\",\n      \"description\": \"TraceBadBlockByHash returns the structured logs created during the execution of EVM against a block pulled from the pool of bad ones and returns them as a JSON object.\",\n      \"params\": [\n        {\n          \"name\": \"badBlockHash\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"badBlockResult\",\n        \"schema\": {\n          \"description\": \"\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceBlock\",\n      \"description\": \"Will return a full stack trace of all invoked opcodes of all transaction that were included included in this block. \\nNote: the parent of this block must be present or it will fail\",\n      \"params\": [\n        {\n          \"name\": \"blockRLP\",\n          \"description\": \"RLP representation of the block\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockRLP\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"stackTrace\",\n        \"schema\": {\n          \"description\": \"\",\n          \"$ref\": \"#/components/schemas/BlockRLP\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceBlockByHash\",\n      \"description\": \"Similar to ` + "`" + `debug_traceBlock` + "`" + `, accepts a block hash and will replay the block that is already present in the database.\",\n      \"params\": [\n        {\n          \"name\": \"blockHash\",\n          \"description\": \"target block hash\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"trace\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceBlockByNumber\",\n      \"description\": \"Similar to debug_traceBlock, accepts a block number and will replay the block that is already present in the database.\",\n      \"params\": [\n        {\n          \"name\": \"blockNumber\",\n          \"description\": \"target block number\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"trace\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceBlockFromFile\",\n      \"description\": \"Similar to ` + "`" + `debug_traceBlock` + "`" + `, accepts a file containing the RLP of the block\",\n      \"params\": [\n        {\n          \"name\": \"filename\",\n          \"description\": \"file containing with block's RLP\",\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"\",\n        \"schema\": {\n          \"description\": \"\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"debug_traceTransaction\",\n      \"description\": \"The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network.\\n It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.\",\n      \"params\": [\n        {\n          \"name\": \"debugTransactionHash\",\n          \"description\": \"Transaction hash to debug\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/TransactionHash\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"trace transaction object\",\n        \"schema\": {\n          \"type\": \"object\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_getHashrate\",\n      \"summary\": \"Returns the number of hashes per second that the node is mining with.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"hashesPerSecond\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"description\": \"Integer of the number of hashes per second\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_setEtherbase\",\n      \"description\": \"In order to earn ether you must have your etherbase (or coinbase) address set. This etherbase defaults to your primary account. If you don't have an etherbase address, then geth --mine will not start up.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"setEtherBaseSuccess\",\n        \"description\": \"returns true if success\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_setExtra\",\n      \"description\": \"There is an option to add extra Data (32 bytes only) to your mined blocks. By convention this is interpreted as a unicode string, so you can set your short vanity tag.\",\n      \"params\": [\n        {\n          \"name\": \"extraData\",\n          \"description\": \". By convention this is interpreted as a unicode string, so you can set your short vanity tag.\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"maxLength\": 64\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"setExtraSuccess\",\n        \"description\": \"returns true if success\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_setGasPrice\",\n      \"description\": \"Sets the minimum accepted gas price for the miner.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/GasPrice\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"setGasPriceSuccess\",\n        \"description\": \"returns true if success\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_setRecommitInterval\",\n      \"description\": \"updates the interval for miner sealing work recommitting.\",\n      \"params\": [\n        {\n          \"name\": \"interval\",\n          \"description\": \"interval for miner sealing work recommitting.\",\n          \"schema\": {\n            \"type\": \"integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"null\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Null\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_start\",\n      \"description\": \"Start starts the miner with the given number of threads. If threads is not defined, the number of workers started is equal to the number of logical CPUs that are usable by this process. If mining is already running, this method adjust the number of threads allowed to use and updates the minimum price required by the transaction pool.\",\n      \"params\": [\n        {\n          \"name\": \"threads\",\n          \"description\": \"number of given threads\",\n          \"schema\": {\n            \"type\": \"integer\"\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"null\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Null\"\n        }\n      }\n    },\n    {\n      \"name\": \"miner_stop\",\n      \"description\": \"Stop terminates the miner, both at the consensus engine level as well as at the block creation level.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"null\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Null\"\n        }\n      }\n    },\n    {\n      \"name\": \"net_listening\",\n      \"description\": \"Determines if this client is listening for new network connections.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"netListeningResult\",\n        \"description\": \"` + "`" + `true` + "`" + ` if listening is active or ` + "`" + `false` + "`" + ` if listening is not active\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"examples\": [\n        {\n          \"name\": \"netListeningTrueExample\",\n          \"description\": \"example of true result for net_listening\",\n          \"params\": [],\n          \"result\": {\n            \"name\": \"netListeningExampleFalseResult\",\n            \"value\": true\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"net_peerCount\",\n      \"description\": \"Returns the number of peers currently connected to this client.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"quantity\",\n        \"description\": \"number of connected peers.\",\n        \"schema\": {\n          \"description\": \"Hex representation of number of connected peers\",\n          \"type\": \"string\"\n        }\n      }\n    },\n    {\n      \"name\": \"net_version\",\n      \"description\": \"Returns the chain ID associated with the current network.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"chainID\",\n        \"description\": \"chain ID associated with the current network\",\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_deriveAccount\",\n      \"description\": \"requests a HD wallet to derive a new account, optionally pinning it for later reuse.\",\n      \"params\": [\n        {\n          \"name\": \"url\",\n          \"description\": \"base url\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          }\n        },\n        {\n          \"name\": \"path\",\n          \"required\": true,\n          \"description\": \"path to derive a new account\",\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        },\n        {\n          \"name\": \"pin\",\n          \"description\": \"pin for later use\",\n          \"schema\": {\n            \"type\": \"boolean\"\n          }\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/Address\"\n      }\n    },\n    {\n      \"name\": \"personal_ecRecover\",\n      \"description\": \"returns the address associated with the private key that was used to calculate the signature in personal_sign.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Message\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Signature\"\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/Address\"\n      }\n    },\n    {\n      \"name\": \"personal_importRawKey\",\n      \"description\": \"Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\",\n      \"params\": [\n        {\n          \"name\": \"keydata\",\n          \"description\": \"unencrypted private key\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"pattern\": \"[a-fA-F\\\\d]{64}$\"\n          }\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"Address of imported private key\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Address\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_listAccounts\",\n      \"description\": \"Returns all the Ethereum account addresses of all keys in the key store.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"addresses\",\n        \"schema\": {\n          \"description\": \"ethereum account addresses in the key store.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"personal_listWallets\",\n      \"description\": \"ListWallets will return a list of wallets this node manages.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"rawWallet\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"url\": {\n                \"type\": \"string\"\n              },\n              \"status\": {\n                \"type\": \"string\"\n              },\n              \"accounts\": {\n                \"description\": \"An array of addresses owned by the client\",\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"address\": {\n                      \"$ref\": \"#/components/schemas/Address\"\n                    },\n                    \"url\": {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    }\n                  }\n                }\n              },\n              \"failure\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"personal_lockAccount\",\n      \"description\": \"lock the account associated with the given address when it's unlocked.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"lockAccountSuccess\",\n        \"schema\": {\n          \"description\": \"returns true if successfully locked account\",\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_newAccount\",\n      \"description\": \"create a new account and returns the address for the new account.\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/Address\"\n      }\n    },\n    {\n      \"name\": \"personal_openWallet\",\n      \"description\": \"OpenWallet initiates a hardware wallet opening procedure, establishing a USB connection and attempting to authenticate via the provided passphrase. Note, the method may return an extra challenge requiring a second open (e.g. the Trezor PIN matrix challenge).\",\n      \"params\": [\n        {\n          \"name\": \"url\",\n          \"description\": \"hd path for hardware wallet\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          }\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"null\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Null\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_sign\",\n      \"description\": \"Signs data using a specific account. This data is before UTF-8 HEX decoded and enveloped as follows: ` + "`" + `'\\\\x19Ethereum Signed Message:\\n' + message.length + message` + "`" + `.\",\n      \"params\": [\n        {\n          \"name\": \"message\",\n          \"required\": true,\n          \"description\": \"The message to sign\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Bytes\"\n          }\n        },\n        {\n          \"name\": \"address\",\n          \"required\": true,\n          \"description\": \"The address of the account who's signature to use.\",\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Address\"\n          }\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"signatureData\",\n        \"schema\": {\n          \"description\": \"The signature data.\",\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_sendTransaction\",\n      \"description\": \"Validate the given passphrase and submit transaction. \",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/TransactionHash\"\n      }\n    },\n    {\n      \"name\": \"personal_signAndSendTransaction\",\n      \"description\": \"Validate the given passphrase and submit transaction. \",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"$ref\": \"#/components/contentDescriptors/TransactionHash\"\n      }\n    },\n    {\n      \"name\": \"personal_signTransaction\",\n      \"description\": \"SignTransaction will create a transaction from the given arguments and tries to sign it with the key associated with args.To. If the given passwd isn't able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast to other nodes\",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Transaction\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        }\n      ],\n      \"result\": {\n        \"name\": \"signedTransaction\",\n        \"description\": \"transaction returned in RLP-form. not broadcast to other nodes.\",\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    {\n      \"name\": \"personal_unlockAccount\",\n      \"description\": \"UnlockAccount will unlock the account associated with the given address with the given password for duration seconds. If duration is nil it will use a default of 300 seconds. It returns an indication if the account was unlocked. \",\n      \"params\": [\n        {\n          \"$ref\": \"#/components/contentDescriptors/Address\"\n        },\n        {\n          \"$ref\": \"#/components/contentDescriptors/Passphrase\"\n        },\n        {\n          \"name\": \"duration\",\n          \"schema\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n          }\n        }\n      ],\n      \"result\": {\n        \"name\": \"unlockAccountSuggess\",\n        \"description\": \"returns true if unlock success\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    {\n      \"name\": \"txpool_inspect\",\n      \"description\": \"The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s),\\n as well as the ones that are being scheduled for future execution only.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"inspection\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/TxPoolInspection\"\n        }\n      }\n    },\n    {\n      \"name\": \"txpool_status\",\n      \"description\": \"The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s),\\n as well as the ones that are being scheduled for future execution only.\",\n      \"params\": [],\n      \"result\": {\n        \"name\": \"status\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/TxPoolStatus\"\n        }\n      }\n    }\n  ],\n  \"components\": {\n    \"schemas\": {\n      \"LogConfig\": {\n        \"type\": \"object\",\n        \"description\": \"Logconfig are the configuration options for the structured logger for the EVM.\",\n        \"properties\": {\n          \"disableMemory\": {\n            \"type\": \"boolean\"\n          },\n          \"disableStack\": {\n            \"type\": \"boolean\"\n          },\n          \"disableStorage\": {\n            \"type\": \"boolean\"\n          },\n          \"debug\": {\n            \"description\": \"print debug during capture end\",\n            \"type\": \"boolean\"\n          },\n          \"limit\": {\n            \"description\": \"maximum length of output, but zero means unlimited\",\n            \"type\": \"integer\"\n          }\n        }\n      },\n      \"CodeResponse\": {\n        \"description\": \"An object containing information about the code.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"description\": \"The compiled Byte code\",\n            \"$ref\": \"#/components/schemas/Bytes\"\n          },\n          \"info\": {\n            \"description\": \"An object contianing information about the code compilation.\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"source\": {\n                \"type\": \"string\",\n                \"description\": \"The sorce code that was compiled\"\n              },\n              \"language\": {\n                \"type\": \"string\",\n                \"description\": \"The language of the code that was compiled\"\n              },\n              \"languageVersion\": {\n                \"type\": \"string\",\n                \"description\": \"The language version number\"\n              },\n              \"compilerVersion\": {\n                \"type\": \"string\",\n                \"description\": \"The sorce code that was compiled\"\n              },\n              \"abiDefinition\": {\n                \"type\": \"object\",\n                \"description\": \"The application binary interface definitions of the code\"\n              }\n            }\n          }\n        }\n      },\n      \"ProofNode\": {\n        \"type\": \"string\",\n        \"description\": \"An indiviual node used to prove a path down a merkle-patricia-tree\",\n        \"$ref\": \"#/components/schemas/Bytes\"\n      },\n      \"AccountProof\": {\n        \"$ref\": \"#/components/schemas/ProofNodes\"\n      },\n      \"StorageProof\": {\n        \"type\": \"array\",\n        \"description\": \"Current block header PoW hash.\",\n        \"items\": {\n          \"type\": \"object\",\n          \"description\": \"Object proving a relationship of a storage value to an account's storageHash.\",\n          \"properties\": {\n            \"key\": {\n              \"description\": \"The key used to get the storage slot in its account tree\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            \"value\": {\n              \"description\": \"The value of the storage slot in its account tree\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            \"proof\": {\n              \"$ref\": \"#/components/schemas/ProofNodes\"\n            }\n          }\n        }\n      },\n      \"ProofNodes\": {\n        \"type\": \"array\",\n        \"description\": \"The set of node values needed to traverse a patricia merkle tree (from root to leaf) to retrieve a value\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/ProofNode\"\n        }\n      },\n      \"StorageEntry\": {\n        \"description\": \"\"\n      },\n      \"StorageMap\": {\n        \"description\": \"\"\n      },\n      \"StorageRange\": {\n        \"description\": \"\"\n      },\n      \"PowHash\": {\n        \"description\": \"Current block header PoW hash.\",\n        \"$ref\": \"#/components/schemas/DataWord\"\n      },\n      \"SeedHash\": {\n        \"description\": \"The seed hash used for the DAG.\",\n        \"$ref\": \"#/components/schemas/DataWord\"\n      },\n      \"TxPoolInspection\": {\n        \"description\": \"Transaction pool inspection is an object with two fields pending and queued.\\n Each of these fields are associative arrays,\\n in which each entry maps an origin-address to a batch of scheduled transactions.\\n These batches themselves are maps associating nonces with transactions summary strings.\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pending\": {\n              \"description\": \"Pending transactions list\",\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/TxBatch\"\n                }\n              }\n            },\n            \"queued\": {\n              \"description\": \"Queued transactions list\",\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/TxBatch\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"TxBatch\": {\n        \"description\": \"Maps an origin-address to a batch of scheduled transactions\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"address\": {\n              \"description\": \"Account address to which batch of transactions relates\",\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Address\"\n              }\n            },\n            \"batch\": {\n              \"description\": \"Batch of transactions for current address\",\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/TxBatchEntry\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"TxBatchEntry\": {\n        \"description\": \"Map associating nonces with transactions summary strings.\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"nonce\": {\n              \"description\": \"nonce\",\n              \"schema\": {\n                \"type\": \"integer\"\n              }\n            },\n            \"tx\": {\n              \"description\": \"Transaction summary strings\",\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        }\n      },\n      \"TxPoolStatus\": {\n        \"description\": \" Transaction pool status. An object with two fields ` + "`" + `pending` + "`" + ` and ` + "`" + `queued` + "`" + `, \\neach of which is a counter representing the number of transactions in that particular state\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pending\": {\n              \"description\": \"Pending transactions count\",\n              \"schema\": {\n                \"type\": \"integer\"\n              }\n            },\n            \"queued\": {\n              \"description\": \"Queued transactions count\",\n              \"schema\": {\n                \"type\": \"integer\"\n              }\n            }\n          }\n        }\n      },\n      \"MixHash\": {\n        \"description\": \"The mix digest.\",\n        \"$ref\": \"#/components/schemas/DataWord\"\n      },\n      \"Difficulty\": {\n        \"description\": \"The boundary condition ('target'), 2^256 / difficulty.\",\n        \"$ref\": \"#/components/schemas/DataWord\"\n      },\n      \"FilterId\": {\n        \"type\": \"string\",\n        \"description\": \"An identifier used to reference the filter.\"\n      },\n      \"BlockHash\": {\n        \"type\": \"string\",\n        \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\",\n        \"description\": \"The hex representation of the Keccak 256 of the RLP encoded block\"\n      },\n      \"BlockNumber\": {\n        \"type\": \"string\",\n        \"pattern\": \"^0x[a-fA-F\\\\d]+$\",\n        \"description\": \"The hex representation of the block's height\"\n      },\n      \"BlockRLP\": {\n        \"type\": \"string\",\n        \"pattern\": \"^[a-fA-F\\\\d]+$\",\n        \"description\": \"The hex representation of the block's RLP\"\n      },\n      \"BlockNumberTag\": {\n        \"type\": \"string\",\n        \"description\": \"The optional block height description\",\n        \"enum\": [\n          \"earliest\",\n          \"latest\",\n          \"pending\"\n        ]\n      },\n      \"Receipt\": {\n        \"type\": \"object\",\n        \"description\": \"The receipt of a transaction\",\n        \"required\": [\n          \"blockHash\",\n          \"blockNumber\",\n          \"contractAddress\",\n          \"cumulativeGasUsed\",\n          \"from\",\n          \"gasUsed\",\n          \"logs\",\n          \"logsBloom\",\n          \"to\",\n          \"transactionHash\",\n          \"transactionIndex\"\n        ],\n        \"properties\": {\n          \"blockHash\": {\n            \"description\": \"BlockHash of the block in which the transaction was mined\",\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          },\n          \"blockNumber\": {\n            \"description\": \"BlockNumber of the block in which the transaction was mined\",\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          },\n          \"contractAddress\": {\n            \"description\": \"The contract address created, if the transaction was a contract creation, otherwise null\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"cumulativeGasUsed\": {\n            \"description\": \"The gas units used by the transaction\",\n            \"$ref\": \"#/components/schemas/Integer\"\n          },\n          \"from\": {\n            \"description\": \"The sender of the transaction\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"gasUsed\": {\n            \"description\": \"The total gas used by the transaction\",\n            \"$ref\": \"#/components/schemas/Integer\"\n          },\n          \"logs\": {\n            \"type\": \"array\",\n            \"description\": \"An array of all the logs triggered during the transaction\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Log\"\n            }\n          },\n          \"logsBloom\": {\n            \"$ref\": \"#/components/schemas/BloomFilter\"\n          },\n          \"to\": {\n            \"description\": \"Destination address of the transaction\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"transactionHash\": {\n            \"description\": \"Keccak 256 of the transaction\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"transactionIndex\": {\n            \"description\": \"An array of all the logs triggered during the transaction\",\n            \"$ref\": \"#/components/schemas/BloomFilter\"\n          },\n          \"postTransactionState\": {\n            \"description\": \"The intermediate stateRoot directly after transaction execution.\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"status\": {\n            \"description\": \"Whether or not the transaction threw an error.\",\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"BloomFilter\": {\n        \"type\": \"string\",\n        \"description\": \"A 2048 bit bloom filter from the logs of the transaction. Each log sets 3 bits though taking the low-order 11 bits of each of the first three pairs of bytes in a Keccak 256 hash of the log's byte series\"\n      },\n      \"Log\": {\n        \"type\": \"object\",\n        \"description\": \"An indexed event generated during a transaction\",\n        \"properties\": {\n          \"address\": {\n            \"description\": \"Sender of the transaction\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"blockHash\": {\n            \"description\": \"BlockHash of the block in which the transaction was mined\",\n            \"$ref\": \"#/components/schemas/BlockHash\"\n          },\n          \"blockNumber\": {\n            \"description\": \"BlockNumber of the block in which the transaction was mined\",\n            \"$ref\": \"#/components/schemas/BlockNumber\"\n          },\n          \"data\": {\n            \"description\": \"The data/input string sent along with the transaction\",\n            \"$ref\": \"#/components/schemas/Bytes\"\n          },\n          \"logIndex\": {\n            \"description\": \"The index of the event within its transaction, null when its pending\",\n            \"$ref\": \"#/components/schemas/Integer\"\n          },\n          \"removed\": {\n            \"schema\": {\n              \"description\": \"Whether or not the log was orphaned off the main chain\",\n              \"type\": \"boolean\"\n            }\n          },\n          \"topics\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"topic\": {\n                \"description\": \"32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256))\",\n                \"$ref\": \"#/components/schemas/DataWord\"\n              }\n            }\n          },\n          \"transactionHash\": {\n            \"description\": \"The hash of the transaction in which the log occurred\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"transactionIndex\": {\n            \"description\": \"The index of the transaction in which the log occurred\",\n            \"$ref\": \"#/components/schemas/Integer\"\n          }\n        }\n      },\n      \"Uncle\": {\n        \"type\": \"object\",\n        \"description\": \"Orphaned blocks that can be included in the chain but at a lower block reward. NOTE: An uncle doesn\u2019t contain individual transactions.\",\n        \"properties\": {\n          \"number\": {\n            \"description\": \"The block number or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"hash\": {\n            \"description\": \"The block hash or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/KeccakOrPending\"\n          },\n          \"parentHash\": {\n            \"description\": \"Hash of the parent block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"nonce\": {\n            \"description\": \"Randomly selected number to satisfy the proof-of-work or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"sha3Uncles\": {\n            \"description\": \"Keccak hash of the uncles data in the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"logsBloom\": {\n            \"type\": \"string\",\n            \"description\": \"The bloom filter for the logs of the block or null when its the pending block\",\n            \"pattern\": \"^0x[a-fA-F\\\\d]+$\"\n          },\n          \"transactionsRoot\": {\n            \"description\": \"The root of the transactions trie of the block.\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"stateRoot\": {\n            \"description\": \"The root of the final state trie of the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"receiptsRoot\": {\n            \"description\": \"The root of the receipts trie of the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"miner\": {\n            \"description\": \"The address of the beneficiary to whom the mining rewards were given or null when its the pending block\",\n            \"oneOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Address\"\n              },\n              {\n                \"$ref\": \"#/components/schemas/Null\"\n              }\n            ]\n          },\n          \"difficulty\": {\n            \"type\": \"string\",\n            \"description\": \"Integer of the difficulty for this block\"\n          },\n          \"totalDifficulty\": {\n            \"description\": \"Integer of the total difficulty of the chain until this block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"extraData\": {\n            \"type\": \"string\",\n            \"description\": \"The 'extra data' field of this block\"\n          },\n          \"size\": {\n            \"type\": \"string\",\n            \"description\": \"Integer the size of this block in bytes\"\n          },\n          \"gasLimit\": {\n            \"type\": \"string\",\n            \"description\": \"The maximum gas allowed in this block\"\n          },\n          \"gasUsed\": {\n            \"type\": \"string\",\n            \"description\": \"The total used gas by all transactions in this block\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"description\": \"The unix timestamp for when the block was collated\"\n          },\n          \"uncles\": {\n            \"description\": \"Array of uncle hashes\",\n            \"type\": \"array\",\n            \"items\": {\n              \"description\": \"Block hash of the RLP encoding of an uncle block\",\n              \"$ref\": \"#/components/schemas/Keccak\"\n            }\n          }\n        }\n      },\n      \"Block\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"number\": {\n            \"description\": \"The block number or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"hash\": {\n            \"description\": \"The block hash or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/KeccakOrPending\"\n          },\n          \"parentHash\": {\n            \"description\": \"Hash of the parent block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"nonce\": {\n            \"description\": \"Randomly selected number to satisfy the proof-of-work or null when its the pending block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"sha3Uncles\": {\n            \"description\": \"Keccak hash of the uncles data in the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"logsBloom\": {\n            \"type\": \"string\",\n            \"description\": \"The bloom filter for the logs of the block or null when its the pending block\",\n            \"pattern\": \"^0x[a-fA-F\\\\d]+$\"\n          },\n          \"transactionsRoot\": {\n            \"description\": \"The root of the transactions trie of the block.\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"stateRoot\": {\n            \"description\": \"The root of the final state trie of the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"receiptsRoot\": {\n            \"description\": \"The root of the receipts trie of the block\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"miner\": {\n            \"description\": \"The address of the beneficiary to whom the mining rewards were given or null when its the pending block\",\n            \"oneOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Address\"\n              },\n              {\n                \"$ref\": \"#/components/schemas/Null\"\n              }\n            ]\n          },\n          \"difficulty\": {\n            \"type\": \"string\",\n            \"description\": \"Integer of the difficulty for this block\"\n          },\n          \"totalDifficulty\": {\n            \"description\": \"Integer of the total difficulty of the chain until this block\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"extraData\": {\n            \"type\": \"string\",\n            \"description\": \"The 'extra data' field of this block\"\n          },\n          \"size\": {\n            \"type\": \"string\",\n            \"description\": \"Integer the size of this block in bytes\"\n          },\n          \"gasLimit\": {\n            \"type\": \"string\",\n            \"description\": \"The maximum gas allowed in this block\"\n          },\n          \"gasUsed\": {\n            \"type\": \"string\",\n            \"description\": \"The total used gas by all transactions in this block\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"description\": \"The unix timestamp for when the block was collated\"\n          },\n          \"transactions\": {\n            \"description\": \"Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter\",\n            \"type\": \"array\",\n            \"items\": {\n              \"oneOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/Transaction\"\n                },\n                {\n                  \"$ref\": \"#/components/schemas/TransactionHash\"\n                }\n              ]\n            }\n          },\n          \"uncles\": {\n            \"description\": \"Array of uncle hashes\",\n            \"type\": \"array\",\n            \"items\": {\n              \"description\": \"Block hash of the RLP encoding of an uncle block\",\n              \"$ref\": \"#/components/schemas/Keccak\"\n            }\n          }\n        }\n      },\n      \"Transaction\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"blockHash\": {\n            \"description\": \"Hash of the block where this transaction was in. null when its pending\",\n            \"$ref\": \"#/components/schemas/KeccakOrPending\"\n          },\n          \"blockNumber\": {\n            \"description\": \"Block number where this transaction was in. null when its pending\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"from\": {\n            \"description\": \"Address of the sender\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"gas\": {\n            \"type\": \"string\",\n            \"description\": \"The gas limit provided by the sender in Wei\"\n          },\n          \"gasPrice\": {\n            \"type\": \"string\",\n            \"description\": \"The gas price willing to be paid by the sender in Wei\"\n          },\n          \"hash\": {\n            \"$ref\": \"#/components/schemas/TransactionHash\"\n          },\n          \"input\": {\n            \"type\": \"string\",\n            \"description\": \"The data field sent with the transaction\"\n          },\n          \"nonce\": {\n            \"description\": \"The total number of prior transactions made by the sender\",\n            \"$ref\": \"#/components/schemas/Nonce\"\n          },\n          \"to\": {\n            \"description\": \"address of the receiver. null when its a contract creation transaction\",\n            \"$ref\": \"#/components/schemas/Address\"\n          },\n          \"transactionIndex\": {\n            \"description\": \"Integer of the transaction's index position in the block. null when its pending\",\n            \"$ref\": \"#/components/schemas/IntOrPending\"\n          },\n          \"value\": {\n            \"description\": \"Value of Ether being transferred in Wei\",\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          \"v\": {\n            \"type\": \"string\",\n            \"description\": \"ECDSA recovery id\"\n          },\n          \"r\": {\n            \"type\": \"string\",\n            \"description\": \"ECDSA signature r\"\n          },\n          \"s\": {\n            \"type\": \"string\",\n            \"description\": \"ECDSA signature s\"\n          }\n        }\n      },\n      \"TransactionHash\": {\n        \"type\": \"string\",\n        \"description\": \"Keccak 256 Hash of the RLP encoding of a transaction\",\n        \"$ref\": \"#/components/schemas/Keccak\"\n      },\n      \"KeccakOrPending\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Keccak\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/Null\"\n          }\n        ]\n      },\n      \"IntOrPending\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Integer\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/Null\"\n          }\n        ]\n      },\n      \"Keccak\": {\n        \"type\": \"string\",\n        \"description\": \"Hex representation of a Keccak 256 hash\",\n        \"pattern\": \"^0x[a-fA-F\\\\d]{64}$\"\n      },\n      \"Nonce\": {\n        \"description\": \"A number only to be used once\",\n        \"pattern\": \"^0x[a-fA-F0-9]+$\",\n        \"type\": \"string\"\n      },\n      \"Null\": {\n        \"type\": \"null\",\n        \"description\": \"Null\"\n      },\n      \"Integer\": {\n        \"type\": \"string\",\n        \"pattern\": \"^0x[a-fA-F0-9]+$\",\n        \"description\": \"Hex representation of the integer\"\n      },\n      \"Address\": {\n        \"type\": \"string\",\n        \"pattern\": \"^0x[a-fA-F\\\\d]{40}$\"\n      },\n      \"Position\": {\n        \"type\": \"string\",\n        \"description\": \"Hex representation of the storage slot where the variable exists\",\n        \"pattern\": \"^0x([a-fA-F0-9]?)+$\"\n      },\n      \"DataWord\": {\n        \"type\": \"string\",\n        \"description\": \"Hex representation of a 256 bit unit of data\",\n        \"pattern\": \"^0x([a-fA-F\\\\d]{64})?$\"\n      },\n      \"Bytes\": {\n        \"type\": \"string\",\n        \"description\": \"Hex representation of a variable length byte array\",\n        \"pattern\": \"^0x([a-fA-F0-9]?)+$\"\n      }\n    },\n    \"contentDescriptors\": {\n      \"Block\": {\n        \"name\": \"block\",\n        \"summary\": \"A block\",\n        \"description\": \"A block object\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Block\"\n        }\n      },\n      \"Null\": {\n        \"name\": \"Null\",\n        \"description\": \"JSON Null value\",\n        \"summary\": \"Null value\",\n        \"schema\": {\n          \"type\": \"null\",\n          \"description\": \"Null value\"\n        }\n      },\n      \"Signature\": {\n        \"name\": \"signature\",\n        \"summary\": \"The signature.\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\",\n          \"pattern\": \"0x^([A-Fa-f0-9]{2}){65}$\"\n        }\n      },\n      \"GasPrice\": {\n        \"name\": \"gasPrice\",\n        \"required\": true,\n        \"schema\": {\n          \"description\": \"Integer of the current gas price\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      },\n      \"Passphrase\": {\n        \"name\": \"passphrase\",\n        \"required\": true,\n        \"description\": \"passphrase for the new account\",\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      },\n      \"Transaction\": {\n        \"required\": true,\n        \"name\": \"transaction\",\n        \"schema\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"gas\",\n            \"gasPrice\",\n            \"nonce\"\n          ],\n          \"properties\": {\n            \"from\": {\n              \"description\": \"Address of the sender\",\n              \"$ref\": \"#/components/schemas/Address\"\n            },\n            \"to\": {\n              \"description\": \"address of the receiver. optional if it's a contract creation transaction\",\n              \"$ref\": \"#/components/schemas/Address\"\n            },\n            \"gas\": {\n              \"type\": \"string\",\n              \"pattern\": \"^0x[a-fA-F\\\\d]+$\",\n              \"description\": \"The gas limit provided by the sender in Wei. default 90000\"\n            },\n            \"gasPrice\": {\n              \"description\": \"The gas price willing to be paid by the sender in Wei\",\n              \"$ref\": \"#/components/schemas/Integer\"\n            },\n            \"value\": {\n              \"description\": \"Value of Ether being transferred in Wei\",\n              \"$ref\": \"#/components/schemas/Keccak\"\n            },\n            \"data\": {\n              \"type\": \"string\",\n              \"description\": \"The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see Ethereum Contract ABI.\"\n            },\n            \"nonce\": {\n              \"description\": \"The total number of prior transactions made by the sender.\",\n              \"$ref\": \"#/components/schemas/Nonce\"\n            }\n          }\n        }\n      },\n      \"Message\": {\n        \"name\": \"message\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Bytes\"\n        }\n      },\n      \"Filter\": {\n        \"name\": \"filter\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"object\",\n          \"description\": \"A filter used to monitor the blockchain for log/events\",\n          \"properties\": {\n            \"fromBlock\": {\n              \"description\": \"Block from which to begin filtering events\",\n              \"$ref\": \"#/components/schemas/BlockNumber\"\n            },\n            \"toBlock\": {\n              \"description\": \"Block from which to end filtering events\",\n              \"$ref\": \"#/components/schemas/BlockNumber\"\n            },\n            \"address\": {\n              \"oneOf\": [\n                {\n                  \"type\": \"string\",\n                  \"description\": \"Address of the contract from which to monitor events\",\n                  \"$ref\": \"#/components/schemas/Address\"\n                },\n                {\n                  \"type\": \"array\",\n                  \"description\": \"List of contract addresses from which to monitor events\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Address\"\n                  }\n                }\n              ]\n            },\n            \"topics\": {\n              \"type\": \"array\",\n              \"description\": \"Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with 'or' options\",\n              \"items\": {\n                \"description\": \"Indexable 32 bytes piece of data (made from the event's function signature in solidity)\",\n                \"$ref\": \"#/components/schemas/DataWord\"\n              }\n            }\n          }\n        }\n      },\n      \"Address\": {\n        \"name\": \"address\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Address\"\n        }\n      },\n      \"BlockHash\": {\n        \"name\": \"blockHash\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/BlockHash\"\n        }\n      },\n      \"Nonce\": {\n        \"name\": \"nonce\",\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Nonce\"\n        }\n      },\n      \"Position\": {\n        \"name\": \"key\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Position\"\n        }\n      },\n      \"Logs\": {\n        \"name\": \"logs\",\n        \"description\": \"An array of all logs matching filter with given id.\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Log\"\n          }\n        }\n      },\n      \"FilterId\": {\n        \"name\": \"filterId\",\n        \"schema\": {\n          \"description\": \"The filter ID for use in ` + "`" + `eth_getFilterChanges` + "`" + `\",\n          \"$ref\": \"#/components/schemas/Integer\"\n        }\n      },\n      \"BlockNumber\": {\n        \"name\": \"blockNumber\",\n        \"required\": true,\n        \"schema\": {\n          \"oneOf\": [\n            {\n              \"$ref\": \"#/components/schemas/BlockNumber\"\n            },\n            {\n              \"$ref\": \"#/components/schemas/BlockNumberTag\"\n            }\n          ]\n        }\n      },\n      \"TransactionHash\": {\n        \"name\": \"transactionHash\",\n        \"required\": true,\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/TransactionHash\"\n        }\n      }\n    }\n  }\n}"`
