// Copyright 2019 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

// +build none

/*

  The mkopenrpc tool creates the OpenRPC JSON schema constant in openrpc_schema.go
  It prints a packaged const declaration that contains a string to stdout.

  Note that this adhoc program uses a '+build none' tag to exclude it from building
  with the rest of it's friends and neighbors.

*/

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)
func main() {
	if len(os.Args) != 2 {
		fmt.Fprintln(os.Stderr, `

Usage: 
 
  go run mkopenrpc.go <path/to/openrpc.json>

This program reads the content of a file <path/to/openrpc.json>
and writes a Go file to stdout, with the derived file data as a 
string constant 'OpenRPCSchema' in a package 'openrpc'. 

Common (but hopefully not that common) use will find the developer 
redirecting this program's output to internal/openrpc/openrpc_schema.go,
like this:

  go run mkopenrpc.go openrpc.json > openrpc_schema.go

This tool's intent is limited to this small and infrequent adhoc case,
and is an example of kind-of-sketchy-but-at-least-very-simple meta-programming.

Alternative approaches to this problem might include
- using a static resource bundler toolset, which essentially does
  the same thing but usually with more bells and whistles
- not including the data in question in the executable, instead
  situating it as an external resource and configuration

The primary reasons this current approach was taken instead of the alternatives
are
- the data in question (OpenRPC schema data) is relatively static, since it
  depends in part on specification and standardization proceedings (eg. EIP),
  and since it describes a public API. Static things are not expected to change very
  much or very often, and so, our rationalization goes, a small adhoc solution 
  for a set-and-forget feature is excusable.
- the data is question is manually generated. Ideally, the same JSON data
  described in internal/openrpc/openrpc_schema.go would be programmatically
  generated by the mechanics (or meta-mechanics) of the actual API implementation.
  However, since this is not (yet) the case, it seems a handrolled quesedilla
  for a homecooked chicken is the fittingest solution.

		`)
		os.Exit(1)
	}

	bs, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		panic(err)
	}

	fmt.Printf(`// Copyright 2019 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package openrpc

// File contains auto-generated constant(s) containing schema data for OpenRPC.
// Their content is a JSON string.
// Use mkopenrpc.go to create/update them.

// OpenRPCSchema defines the default full suite of possibly available go-ethereum RPC
// methods.
const OpenRPCSchema = %s
%s
%s
`, "`", backtickEscape(string(bs)), "`")
}

// backtickEscape escape backticks in a string literal.
// HAVE: \"description\": \"If `true` it returns...
// WANT: \"description\": \"If ` + "`" + `true` + "`" + ` it returns...
func backtickEscape(s string) string {
	bt := "`"
	bescS := fmt.Sprintf(`%s + "%s" + %s`, bt, bt, bt)
	s = strings.Replace(s, bt, bescS, -1)
	return s
}


